'''
Django settings for {{cookiecutter.project_slug}} project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
'''

from datetime import timedelta
from pathlib import Path

from decouple import config as env_config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env_config('SECRET_KEY', default='django-insecure$8!$5h3wv1^+3l@6i3z&^j7!1j5^_&5w!+3z!e8&0@7@6@z7@')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env_config('DEBUG', default=True, cast=bool)
DEV_ENV = env_config('DEV_ENV', default='local')
LOCAL_DEV = True if DEV_ENV == 'local' else False
REMOTE_DB = env_config('REMOTE_DB', default=False, cast=bool)

APPEND_SLASH = True
ALLOWED_HOSTS = env_config('ALLOWED_HOSTS', default='*', cast=lambda hosts: [host.strip() for host in hosts.split(',')])
# CORS_ALLOWED_ORIGINS = env_config(
#     'CORS_ALLOWED_ORIGINS', default='localhost', cast=lambda origins: [origin.strip() for origin in origins.split(',')]
# )
# CSRF_TRUSTED_ORIGINS = env_config(
#     'CSRF_TRUSTED_ORIGINS',
#     default='http://localhost',
#     cast=lambda origins: [origin.strip() for origin in origins.split(',')],
# )

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # THIRD PARTY APPS
    'rest_framework',
    'rest_framework_simplejwt',
    'imagekit',
    'corsheaders',
    'django_filters',
    'django_extensions',
    'django_celery_results',
    'django_celery_beat',
    'drf_spectacular',
    'drf_spectacular_sidecar',
    # LOCAL APPS
    'authentication',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.common.BrokenLinkEmailsMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

if DEBUG and DEV_ENV != 'production':
    INSTALLED_APPS = INSTALLED_APPS + ['debug_toolbar']
    MIDDLEWARE = MIDDLEWARE + ['debug_toolbar.middleware.DebugToolbarMiddleware']

    def show_toolbar(request):
        return DEBUG and DEV_ENV != 'production'

    DEBUG_TOOLBAR_CONFIG = {
        "SHOW_TOOLBAR_CALLBACK": show_toolbar,
    }


ROOT_URLCONF = '{{cookiecutter.project_slug}}.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = '{{cookiecutter.project_slug}}.wsgi.application'
ASGI_APPLICATION = '{{cookiecutter.project_slug}}.asgi.application'

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': env_config('POSTGRES_NAME', default='postgres'),
        'USER': env_config('POSTGRES_USER', default='postgres'),
        'PASSWORD': env_config('POSTGRES_PASSWORD', default='postgres'),
        'HOST': env_config('POSTGRES_HOST', default='localhost'),
        'PORT': env_config('POSTGRES_PORT', default='5432'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTH_USER_MODEL = 'authentication.User'

REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 200,
    'DEFAULT_AUTHENTICATION_CLASSES': ['rest_framework_simplejwt.authentication.JWTAuthentication'],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1) if DEV_ENV == 'staging' or LOCAL_DEV else timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=30) if DEV_ENV == 'staging' or LOCAL_DEV else timedelta(days=2),
    'SIGNING_KEY': SECRET_KEY,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'UPDATE_LAST_LOGIN': True,
}

SPECTACULAR_SETTINGS = {
    "TITLE": "{{ cookiecutter.project_name }} API Documentation",
    "VERSION": "1.0.0",
    'SWAGGER_UI_DIST': 'SIDECAR',
    'SWAGGER_UI_FAVICON_HREF': 'SIDECAR',
    'REDOC_DIST': 'SIDECAR',
    'COMPONENT_SPLIT_REQUEST': True,
}
# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/api/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
MEDIA_URL = '/api/media/'
MEDIA_ROOT = BASE_DIR / 'media'

STATICFILES_DIRS = [
    BASE_DIR / 'assets',
]
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"


CORS_ALLOW_HEADERS = (
    "accept",
    "authorization",
    "content-type",
    "Content-Type",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
    "x-api-key",
    "content-disposition",
)
CORS_ALLOW_METHODS = [
    "GET",
    "POST",
    "PUT",
    "PATCH",
    "DELETE",
    "OPTIONS",
]
# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CELERY SETTINGS
CELERY_BROKER_URL = env_config('CELERY_BROKER_URL', default='redis://localhost:6379/0')
CELERY_RESULT_BACKEND = env_config('CELERY_RESULT_BACKEND', default='redis://localhost:6379/0')
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"
CELERY_CACHE_BACKEND = env_config('CELERY_BROKER_URL', default='redis://localhost:6379/0')
CELERY_TASK_TRACK_STARTED = env_config('CELERY_TASK_TRACK_STARTED', cast=bool, default=True)
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = env_config('CELERY_TASK_TRACK_STARTED', cast=bool, default=True)
CELERY_BROKER_CONNECTION_MAX_RETRIES = env_config('CELERY_BROKER_CONNECTION_MAX_RETRIES', cast=int, default=3)

# Flower Celery Monitor Configuration
CELERY_FLOWER_USER = env_config('CELERY_FLOWER_USER', default='admin')
CELERY_FLOWER_PASSWORD = env_config('CELERY_FLOWER_PASSWORD', default='admin')
CELERY_FLOWER_PORT = env_config('CELERY_FLOWER_PORT', cast=int, default=5555)
CELERY_FLOWER_URL = env_config('CELERY_FLOWER_URL', default='http://localhost:5555')

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = env_config('EMAIL_HOST')
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = env_config('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = env_config('EMAIL_HOST_PASSWORD')
SERVER_EMAIL = DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
